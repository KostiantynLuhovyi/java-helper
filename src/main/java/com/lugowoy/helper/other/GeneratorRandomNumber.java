package com.lugowoy.helper.other;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.Random;

/**
 * Created by Konstantin Lugowoy on 01.01.2018.
 *
 * @author Konstantin Lugowoy
 * @version 1.4
 *
 * The interface provides a functional for generating random integers and double numbers.
 *  Functionality is provided in a static context.
 */

public interface GeneratorRandomNumber {

    Random RANDOM = new Random();

    /**
     * Value for determining the number of digits after the decimal point in double numbers.
     */
    int SCALE = 3;

    /**
     * The default starting value for generating random numbers of some methods.
     */
    int DEFAULT_START_BOUND_VALUE = 0;
    /**
     * The default starting real number value for generating double and float numbers.
     * */
    int DEFAULT_START_REAL_BOUND = -1000000;
    /**
     * The default ending real number value for generating double and float numbers.
     * */
    int DEFAULT_END_REAL_BOUND = 10000000;

    /**
     * The method generate a random byte number in the range from {@link Byte#MIN_VALUE} to {@link Byte#MAX_VALUE}.
     * @return The generated byte number.
     */
    static byte generateByte() {
        return (byte) getRandomIntegerValueInRange(Byte.MIN_VALUE, Byte.MAX_VALUE);
    }

    /**
     * The method generate a random byte number in the range from {@link GeneratorRandomNumber#DEFAULT_START_BOUND_VALUE}
     * to parameter "bound".
     * @return The generated byte number.
     */
    static byte generateByte(byte bound) {
        return (byte) getRandomIntegerValueInRange((byte) DEFAULT_START_BOUND_VALUE, bound);
    }

    /**
     * The method generate a random byte number in the range from parameter "startBound" to parameter "endBound" .
     * @return The generated byte number.
     */
    static byte generateByte(byte startBound, byte endBound) {
        return (byte) getRandomIntegerValueInRange(startBound, endBound);
    }

    /**
     * The method generate a random short number in the range from {@link Short#MIN_VALUE} to {@link Short#MAX_VALUE}.
     * @return The generated short number.
     */
    static short generateShort() {
        return (short) getRandomIntegerValueInRange(Short.MIN_VALUE, Short.MAX_VALUE);
    }

    /**
     * The method generate a random short number in the range from {@link GeneratorRandomNumber#DEFAULT_START_BOUND_VALUE}
     * to parameter "bound".
     * @return The generated short number.
     */
    static short generateShort(short bound) {
        return (short) getRandomIntegerValueInRange(DEFAULT_START_BOUND_VALUE, Short.MAX_VALUE);
    }

    /**
     * The method generate a random short number in the range from parameter "startBound" to parameter "endBound" .
     * @return The generated short number.
     */
    static short generateShort(short startBound, short endBound) {
        return (short) getRandomIntegerValueInRange(startBound, endBound);
    }

    /**
     * The method generate a random integer number in the range from {@link Integer#MIN_VALUE}
     * to {@link Integer#MAX_VALUE}.
     * @return The generated integer number.
     */
    static int generateInt() {
        return RANDOM.nextInt();
    }

    /**
     * The method generate a random integer number in the range from {@link GeneratorRandomNumber#DEFAULT_START_BOUND_VALUE}
     * to parameter "bound".
     * @return The generated integer number.
     */
    static int generateInt(int bound) {
        return getRandomIntegerValueInRange(DEFAULT_START_BOUND_VALUE, bound);
    }

    /**
     * The method generate a random integer number in the range from parameter "startBound" to parameter "endBound" .
     * @return The generated integer number.
     */
    static int generateInt(int startBound, int endBound) {
        return getRandomIntegerValueInRange(startBound, endBound);
    }

    /**
     * The method generate a random long number in the range from {@link Long#MIN_VALUE}
     *  to {@link Long#MAX_VALUE}.
     * @return The generated long number.
     */
    static long generateLong() {
        return getRandomLongValueInRange(Long.MIN_VALUE, Long.MAX_VALUE);
    }

    /**
     * The method generate a random long number in the range from {@link GeneratorRandomNumber#DEFAULT_START_BOUND_VALUE}
     * to parameter "bound".
     * @return The generated long number.
     */
    static long generateLong(long bound) {
        return getRandomLongValueInRange(DEFAULT_START_BOUND_VALUE, bound);
    }

    /**
     * The method generate a random long number from parameter "startBound" to parameter "endBound".
     * @return The generated long number.
     */
    static long generateLong(long startBound, long endBound) {
        return getRandomLongValueInRange(startBound, endBound);
    }

    /**
     * The method generate a random double number in the range from {@link GeneratorRandomNumber#DEFAULT_START_REAL_BOUND}
     *  to {@link GeneratorRandomNumber#DEFAULT_END_REAL_BOUND}.
     * @return The generated double number.
     */
    static double generateDouble() {
        return new BigDecimal(getRandomDoubleValueInRange(DEFAULT_START_REAL_BOUND,
                                                          DEFAULT_END_REAL_BOUND)).setScale(SCALE, RoundingMode.HALF_DOWN)
                                                                                  .doubleValue();
    }

    /**
     * The method generate a random double number in the range from {@link GeneratorRandomNumber#DEFAULT_START_BOUND_VALUE}
     * to parameter "bound".
     * @return The generated double number.
     */
    static double generateDouble(double bound) {
        return new BigDecimal(getRandomDoubleValueInRange(DEFAULT_START_BOUND_VALUE, bound)).setScale(SCALE, RoundingMode.HALF_DOWN).doubleValue();
    }

    /**
     * The method generate a random double number from parameter "startBound" to parameter "endBound".
     * @return The generated double number.
     */
    static double generateDouble(double startBound, double endBound) {
        return new BigDecimal(getRandomDoubleValueInRange(startBound, endBound)).setScale(SCALE, RoundingMode.HALF_DOWN).doubleValue();
    }

    /**
     * The method generate a random float number in the range from {@link GeneratorRandomNumber#DEFAULT_START_REAL_BOUND}
     *  to {@link GeneratorRandomNumber#DEFAULT_START_REAL_BOUND}.
     *
     * @return The generated float number.
     */
    static float generateFloat() {
        return (float) getRandomDoubleValueInRange(DEFAULT_START_REAL_BOUND, DEFAULT_END_REAL_BOUND);
    }

    /**
     * The method generate a random float number in the range from {@link GeneratorRandomNumber#DEFAULT_START_BOUND_VALUE}
     * to parameter "bound".
     * @return The generated float number.
     */
    static float generateFloat(float bound) {
        return (float) getRandomDoubleValueInRange(DEFAULT_START_BOUND_VALUE, bound);
    }

    /**
     * The method generate a random float number from parameter "startBound" to parameter "endBound".
     * @return The generated float number.
     */
    static float generateFloat(float startBound, float endBound) {
        return (float) getRandomDoubleValueInRange(startBound, endBound);
    }

    private static int getRandomIntegerValueInRange(int startBound, int endBound) {
        return RANDOM.nextInt() * (endBound - startBound) + startBound;
    }

    private static long getRandomLongValueInRange(long startBound, long endBound) {
        return RANDOM.nextLong() * (endBound - startBound) + startBound;
    }

    private static double getRandomDoubleValueInRange(double startBound, double endBound) {
        return RANDOM.nextDouble() * (endBound - startBound) + startBound;
    }

}
